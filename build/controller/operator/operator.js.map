{
  "version": 3,
  "file": "operator.js",
  "sourceRoot": "../../..",
  "sources": [
    "src/controller/operator/operator.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "spawnCmd = require '../../utils/spawnCmd'\n{ exec }  = require 'child_process'\n{ red } = require 'chalk'\noperator = Symbol 'operator'\n\nclass Operator\n    constructor: ->\n        @addTemp = @addTemp.bind @\n\n    addTemp: (req, res) ->\n        base_path = req.headers['cookie'].replace('current_dir=', '')\n        tempDirs = req.body['tempdirs[]'] or req.body['tempdirs']\n        addToTemp = if tempDirs is 'all' then '.' else \"#{tempDirs}\".replace /,/g, ' '\n\n\n        if addToTemp is 'undefined'\n            res.send { code: 1, srv_msg: \"没有文件被添加至暂存区\" }\n        else\n            exec(\"git add #{addToTemp}\", { cwd: decodeURIComponent base_path }, (err, stdout1, stdin1) ->\n                if err\n                    console.log red(err)\n                    if /Not a git repository/gi.test err.toString()\n                        res.send { code: 0, err_msg: '没有.git 请先初始化' }\n                else\n                    res.send { code: 1, srv_msg: if stdout1 is '' then '暂存区添加成功' else stdout1 }\n            )\n    addCommit: (req, res) ->\n        { data } = req.body\n        base_path = req.headers['cookie'].replace('current_dir=', '')\n        spawnCmd('git', ['commit', '-m', \"'#{data}'\"], { cwd: decodeURIComponent base_path }).then((val) ->\n            if /干净的工作区/.test val.data\n                res.send { code: 1, srv_msg: val.data }\n            else\n                res.send { code: 1, srv_msg: '创建成功' }\n        ).catch((err) ->\n            console.log red(err)\n            res.send err\n        )\n    addRemote: (req, res) ->\n        base_path = req.headers['cookie'].replace('current_dir=', '')\n        { remoteGit } = req.body\n        spawnCmd('git', ['remote', 'add', 'origin', remoteGit], { cwd: base_path }).then((rval) ->\n            res.send { code: 1, err_msg }\n        ).catch((rerr) ->\n            res.send rerr\n        )\n    \nif not global[operator]\n    global[operator] =  new Operator()\n\nmodule.exports = global[operator]\n\n\n\n\n"
  ]
}