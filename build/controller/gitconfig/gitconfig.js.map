{
  "version": 3,
  "file": "gitconfig.js",
  "sourceRoot": "../../..",
  "sources": [
    "src/controller/gitconfig/gitconfig.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "os = require 'os'\nfs = require 'fs'\n{ red } = require 'chalk'\n{ resolve } = require 'path'\n{ exec } = require 'child_process'\nspawnCmd = require '../../utils/spawnCmd'\nconfigCoffee = Symbol 'configCoffee'\nsh_path = process.cwd() + '/keygen.sh'\n\n###\n@module config\n###\n\n\n\nclass Config\n    constructor: () ->\n        # @_readKeygen = @readKeygen.bind @\n        console.log process.cwd()\n        @getKey = @getKey.bind @\n\n    _readKeygen: ->\n        switch process.platform\n            when 'linux'\n                sshDir = resolve(os.homedir(), '.ssh')\n            when  'win32'\n                sshDir = resolve(os.homedir(), '.ssh')\n\n        new Promise((resolve, reject) ->\n            fs.access(sshDir + '/id_rsa.pub', fs.constants.F_OK, (err1) ->\n                if err1\n                   exec(\"git config --global user.email\", (stderr, stdout, stdin) ->\n                        shell = \"\"\"ssh-keygen -t rsa -C #{stdout}<< EOF\n                                    $HOME/.ssh/id_rsa\n                                    y\n                                    EOF\"\"\"\n                        fs.writeFile(sh_path, shell, { mode: 0o777 }, (err2) ->\n                            if err2\n                                reject { code: 0,  err_msg: err2 }\n                            spawnCmd(sh_path).then( ->\n                                setTimeout (->\n                                    fs.readFile(sshDir + '/id_rsa.pub', { encoding: 'utf-8' },\n                                    (err3, val2) ->\n                                        if err3\n                                            reject { code: 0, err_msg: err3 }\n                                        resolve { code: 1, srv_msg: val2 }\n                                    )\n                                ), 200\n                            ).catch((err) ->\n                                console.log err\n                                reject { code: 0, err_msg: 'ssh-keygen 生成错误' }\n                            )\n                        )\n                   )\n                else\n                    fs.readFile(sshDir + '/id_rsa.pub', { encoding: 'utf-8' }, (err5, val1) ->\n                            if err5\n                                reject { code: 0, err_msg: err5 }\n                            resolve { code: 1, srv_msg: val1 }\n                        )\n            )\n        )\n\n\n    # intiConfig\n\n    initConfig: (req, res) ->\n        { url } = req if req?\n        spawnCmd('git', ['config', '--list']).then((obj) ->\n            username = /user\\.name/gi.test obj.data\n            email = /user\\.email/gi.test obj.data\n            if username and email\n                res.send { code: 1, srv_msg: '已初始化', data_msg: obj.data }\n            else\n                res.send { code: 0, srv_msg: '未初始化请先选择  $git全局设置$' }\n        ).catch((err) ->\n            console.log err\n        )\n\n    configUser: (req, res) ->\n        { body, url } = req if req?\n        { username, email } = body\n        exec(\"git config --global user.name #{username}\", (err, stdout1, stdin) ->\n            if err\n                console.log red(err)\n            else\n                exec(\"git config --global user.email #{email}\", (err, stdout2, stdin) ->\n                    if err\n                        console.log red(err)\n                    else\n                        res.send { code: 1, srv_msg: 'git初始配置成功' }\n                )\n        )\n    getKey: (req, res) ->\n        { url } = req if req?\n        @_readKeygen().then((val) ->\n            res.send val\n            res.end()\n        ).catch((err) ->\n            console.log red(err.err_msg)\n            res.send err\n            res.end()\n        )\n\n# unique module\nif not global[configCoffee]\n    global[configCoffee] = new Config()\n\nmodule.exports = global[configCoffee]"
  ]
}