// Generated by CoffeeScript 2.3.2
(function() {
  var Config, configCoffee, exec, fs, os, red, resolve, sh_path, spawnCmd;

  os = require('os');

  fs = require('fs');

  ({red} = require('chalk'));

  ({resolve} = require('path'));

  ({exec} = require('child_process'));

  spawnCmd = require('../../utils/spawnCmd');

  configCoffee = Symbol('configCoffee');

  sh_path = process.cwd() + '/keygen.sh';

  /*
  @module config
  */
  Config = class Config {
    constructor() {
      // @_readKeygen = @readKeygen.bind @
      console.log(process.cwd());
      this.getKey = this.getKey.bind(this);
    }

    _readKeygen() {
      var sshDir;
      switch (process.platform) {
        case 'linux':
          sshDir = resolve(os.homedir(), '.ssh');
          break;
        case 'win32':
          sshDir = resolve(os.homedir(), '.ssh');
      }
      return new Promise(function(resolve, reject) {
        return fs.access(sshDir + '/id_rsa.pub', fs.constants.F_OK, function(err1) {
          if (err1) {
            return exec("git config --global user.email", function(stderr, stdout, stdin) {
              var shell;
              shell = `ssh-keygen -t rsa -C ${stdout}<< EOF\n$HOME/.ssh/id_rsa\ny\nEOF`;
              return fs.writeFile(sh_path, shell, {
                mode: 0o777
              }, function(err2) {
                if (err2) {
                  reject({
                    code: 0,
                    err_msg: err2
                  });
                }
                return spawnCmd(sh_path).then(function() {
                  return setTimeout((function() {
                    return fs.readFile(sshDir + '/id_rsa.pub', {
                      encoding: 'utf-8'
                    }, function(err3, val2) {
                      if (err3) {
                        reject({
                          code: 0,
                          err_msg: err3
                        });
                      }
                      return resolve({
                        code: 1,
                        srv_msg: val2
                      });
                    });
                  }), 200);
                }).catch(function(err) {
                  console.log(err);
                  return reject({
                    code: 0,
                    err_msg: 'ssh-keygen 生成错误'
                  });
                });
              });
            });
          } else {
            return fs.readFile(sshDir + '/id_rsa.pub', {
              encoding: 'utf-8'
            }, function(err5, val1) {
              if (err5) {
                reject({
                  code: 0,
                  err_msg: err5
                });
              }
              return resolve({
                code: 1,
                srv_msg: val1
              });
            });
          }
        });
      });
    }

    // intiConfig
    initConfig(req, res) {
      var url;
      if (req != null) {
        ({url} = req);
      }
      return spawnCmd('git', ['config', '--list']).then(function(obj) {
        var email, username;
        username = /user\.name/gi.test(obj.data);
        email = /user\.email/gi.test(obj.data);
        if (username && email) {
          return res.send({
            code: 1,
            srv_msg: '已初始化',
            data_msg: obj.data
          });
        } else {
          return res.send({
            code: 0,
            srv_msg: '未初始化请先选择  $git全局设置$'
          });
        }
      }).catch(function(err) {
        return console.log(err);
      });
    }

    configUser(req, res) {
      var body, email, url, username;
      if (req != null) {
        ({body, url} = req);
      }
      ({username, email} = body);
      return exec(`git config --global user.name ${username}`, function(err, stdout1, stdin) {
        if (err) {
          return console.log(red(err));
        } else {
          return exec(`git config --global user.email ${email}`, function(err, stdout2, stdin) {
            if (err) {
              return console.log(red(err));
            } else {
              return res.send({
                code: 1,
                srv_msg: 'git初始配置成功'
              });
            }
          });
        }
      });
    }

    getKey(req, res) {
      var url;
      if (req != null) {
        ({url} = req);
      }
      return this._readKeygen().then(function(val) {
        res.send(val);
        return res.end();
      }).catch(function(err) {
        console.log(red(err.err_msg));
        res.send(err);
        return res.end();
      });
    }

  };

  // unique module
  if (!global[configCoffee]) {
    global[configCoffee] = new Config();
  }

  module.exports = global[configCoffee];

}).call(this);

//# sourceMappingURL=gitconfig.js.map
